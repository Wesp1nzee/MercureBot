from keyboards.inlain import(create_keyboard_lesson,
                            create_keyboard_theory_practice,
                            create_keyboard_menu)
from keyboards.inlain_practice import(create_keyboard_pract)
from keyboards.inlain_teor import(create_keyboard_teor)
from dictionar.dictionaries import glavu, lesson_content_dict, lesson_dict_article
from handlers.db import users_db_condition
from lexicon.lexicon import generate_tasks_string

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.enums import ParseMode 
from aiogram.utils.markdown import hide_link 
from aiogram.utils.keyboard import InlineKeyboardBuilder


router = Router()
#–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@router.callback_query(F.data.startswith('Back'))
async def message_with_text(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π –∫–ª–∞—Å—Å —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω:",    
        reply_markup = create_keyboard_menu()
    )
    await callback.answer()

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∏–Ω–ª–∞–∏–Ω –∫–Ω–æ–ø–∫—É "–ö–ª–∞—Å—Å"
@router.callback_query(F.data.startswith('class_'))
async def callbacks_num_change_fab(callback: CallbackQuery ):
    users_db_condition[callback.from_user.id].update({"class":f"{callback.data.split('_')[1]}"})

    await callback.message.edit_text( 
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑—É—á–∞—Ç—å."
        "–¢–µ–æ—Ä–∏—é –∏–ª–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ?",
        reply_markup=create_keyboard_theory_practice()
    )
    await callback.answer()

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–æ—Ä–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ 
@router.callback_query((F.data.startswith('theory')) | (F.data.startswith('practice')))
async def callbacks_num_change_fab(callback: CallbackQuery ):
    users_db_condition[callback.from_user.id].update({"direction":f"{callback.data}"})
#–£—Å–ª–æ–≤–∏–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–æ—Ä–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    if users_db_condition[callback.from_user.id]['direction'] == "theory":
        await callback.message.edit_text( 
        f"–í—ã–±–µ—Ä–∏ –≥–ª–∞–≤—É –¥–ª—è {users_db_condition[callback.from_user.id]['class']} –∫–ª–∞—Å—Å–∞:",
        reply_markup=create_keyboard_teor(users_db_condition[callback.from_user.id]['class'])
    )
        await callback.answer()

#–£—Å–ª–æ–≤–∏–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ 
    if users_db_condition[callback.from_user.id]['direction'] == "practice":
        await callback.message.edit_text( 
        f"–í—ã–±–µ—Ä–∏ –≥–ª–∞–≤—É –¥–ª—è {users_db_condition[callback.from_user.id]['class']} –∫–ª–∞—Å—Å–∞: ",
        reply_markup= create_keyboard_pract(users_db_condition[callback.from_user.id]['class'])
        )
        await callback.answer()

#–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –≥–ª–∞–≤—ã 
@router.callback_query((F.data.startswith('glava:T')) | (F.data.startswith('glava:P')))
async def callbacks_num_change_fab(callback: CallbackQuery ):
    users_db_condition[callback.from_user.id].update({"chapter":f"{callback.data.split('_')[2]}"})
    #–£—Å–ª–æ–≤–∏–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–æ—Ä–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥–ª–∞–≤—ã
    if users_db_condition[callback.from_user.id]['direction'] == "theory":
        await callback.message.edit_text(
            "–¢–µ–º—ã —É—Ä–æ–∫–æ–≤:" 
            f"<b>\n{lesson_content_dict[users_db_condition[callback.from_user.id]['class']][users_db_condition[callback.from_user.id]['chapter']]}</b>",
            reply_markup=create_keyboard_lesson(users_db_condition[callback.from_user.id]['class'],users_db_condition[callback.from_user.id]['chapter'])
        )
        await callback.answer()
    #–£—Å–ª–æ–≤–∏–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥–ª–∞–≤—ã
    if users_db_condition[callback.from_user.id]['direction'] == "practice":
        await callback.message.edit_text( 
        f'–í–æ—Ç –≤–∞—à–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è {users_db_condition[callback.from_user.id]["class"]} –∫–ª–∞—Å—Å–∞ "{glavu[users_db_condition[callback.from_user.id]["class"]][users_db_condition[callback.from_user.id]["chapter"]]}"',
        )
        await callback.answer()

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∏–Ω–ª–∞–∏–Ω –∫–Ω–æ–ø–∫—É "–£—Ä–æ–∫–∏"
@router.callback_query(F.data.startswith('lesson_'))
async def callbacks_num_change_fab(callback: CallbackQuery ):
    lesson_data =  callback.data.split("_")[1]
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô–ù–∞–∑–∞–¥", callback_data="theory")
    await callback.message.edit_text( 
         f"{hide_link(lesson_dict_article[users_db_condition[callback.from_user.id]['class']][users_db_condition[callback.from_user.id]['chapter']][lesson_data])}"
         f"–í–æ—Ç –≤–∞—à –≤—ã–±—Ä–∞–Ω—ã–π —É—Ä–æ–∫:", parse_mode=ParseMode.HTML, reply_markup=builder.as_markup()
     )    
    await callback.answer()


@router.callback_query(F.data.startswith('profile'))
async def callbacks_profile(callback: CallbackQuery ):
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô–ù–∞–∑–∞–¥", callback_data="Back")
    await callback.message.edit_text(
        f"–≠—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –∏ —Ç—É—Ç –≤–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å —è–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞—à–∏–º —Ä–µ—à–µ–Ω—ã–º –∑–∞–¥–∞—á–∫–∞–º.üë®üèª‚Äçüéì\n\n"
        f"–í–æ—Ç –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:\n\n{generate_tasks_string(callback.from_user.id)}",
        reply_markup=builder.as_markup()
     )    
    await callback.answer()